import React, { useState } from 'react';
import { Upload, Loader2 } from "lucide-react";
import { useLocation } from 'react-router-dom';
import Header from '../components/Header';
import Footer from '../components/Footer';
import './ProductDetail.scss';
import { generateTryOn } from '../service/TryonService';

export default function ProductDetail() {
  const { state } = useLocation();
  const product = state?.product;

  // fake data th√™m m√¥ t·∫£ + size
  const sizes = ['S', 'M', 'L', 'XL'];
  const description = `
    √Åo kho√°c Degrey ƒë∆∞·ª£c l√†m t·ª´ ch·∫•t li·ªáu cotton pha polyester cao c·∫•p, 
    mang l·∫°i c·∫£m gi√°c tho·∫£i m√°i, tho√°ng m√°t v√† d·ªÖ ch·ªãu khi m·∫∑c. 
    Thi·∫øt k·∫ø hi·ªán ƒë·∫°i, form d√°ng unisex, ph√π h·ª£p cho c·∫£ nam v√† n·ªØ. 
    S·∫£n ph·∫©m c√≥ ƒë·ªô b·ªÅn cao, d·ªÖ gi·∫∑t v√† gi·ªØ form t·ªët sau nhi·ªÅu l·∫ßn s·ª≠ d·ª•ng.
  `;

  // State popup try-on
  const [showPopup, setShowPopup] = useState(false);
  const [personFile, setPersonFile] = useState(null);
  const [personImage, setPersonImage] = useState(null);
  const [resultImage, setResultImage] = useState(null);
  const [loading, setLoading] = useState(false);
  const [selectedSize, setSelectedSize] = useState('M');

  if (!product) return <div style={{ padding: 20 }}>Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m.</div>;

  // Handle upload & generate
  const handlePersonUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      setPersonFile(file);
      setPersonImage(URL.createObjectURL(file));
    }
  };

  const handleGenerate = async () => {
    if (!personFile) return alert("Vui l√≤ng ch·ªçn ·∫£nh c·ªßa b·∫°n!");
    setLoading(true);
    setResultImage(null);

    try {
      // t·∫°o file √°o t·ª´ image product
      const res = await fetch(product.image);
      const blob = await res.blob();
      const clothFile = new File([blob], "cloth.jpg", { type: blob.type });

      const result = await generateTryOn(personFile, clothFile);

      if (result.image_url) setResultImage(result.image_url);
      else if (result.image_base64)
        setResultImage(`data:image/png;base64,${result.image_base64}`);
    } catch (err) {
      console.error(err);
      alert("L·ªói khi g·ªçi API, vui l√≤ng th·ª≠ l·∫°i.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="product-detail-page">
      <Header />

      <main className="product-detail-main">
        <div className="detail-container">
          {/* Image */}
          <div className="detail-image">
            <img src={product.image} alt={product.name} />
          </div>

          {/* Info */}
          <div className="detail-info">
            <h2 className="product-name">{product.name}</h2>

            <div className="price-wrapper">
              <span className="current-price">{product.price}</span>
              {product.originalPrice && (
                <span className="original-price">{product.originalPrice}</span>
              )}
            </div>

            <div className="detail-sizes">
              <h4>Ch·ªçn size:</h4>
              <div className="size-list">
                {sizes.map((size) => (
                  <span
                    key={size}
                    className={`size-item ${size === selectedSize ? 'active' : ''}`}
                    onClick={() => setSelectedSize(size)}
                  >
                    {size}
                  </span>
                ))}
              </div>
            </div>

            <div className="detail-actions">
              <button className="add-cart-btn">üõí Th√™m v√†o gi·ªè</button>
              <button className="tryon-btn" onClick={() => setShowPopup(true)}>
                üëï Xem th·ª≠ s·∫£n ph·∫©m
              </button>
            </div>

            <div className="detail-description">
              <h4>M√¥ t·∫£ s·∫£n ph·∫©m</h4>
              <p>{description}</p>
            </div>
          </div>
        </div>
      </main>

      {/* Popup Try On */}
      {showPopup && (
        <div className="tryon-popup">
          <div className="tryon-content">
            <button className="close-btn" onClick={() => setShowPopup(false)}>‚úñ</button>

            {!resultImage ? (
              <>
                <h3>üëï Th·ª≠ ƒë·ªì ·∫£o</h3>
                <p>Vui l√≤ng t·∫£i l√™n ·∫£nh c·ªßa b·∫°n ƒë·ªÉ xem k·∫øt qu·∫£</p>

                {!personImage ? (
                  <label className="upload-box">
                    <Upload size={20} />
                    <span>Ch·ªçn ·∫£nh</span>
                    <input
                      type="file"
                      accept="image/*"
                      onChange={handlePersonUpload}
                      hidden
                    />
                  </label>
                ) : (
                  <div className="preview-box">
                    <img src={personImage} alt="Person" />
                  </div>
                )}

                <button
                  className="generate-btn"
                  onClick={handleGenerate}
                  disabled={!personFile || loading}
                >
                  {loading ? (
                    <>
                      <Loader2 className="spin" size={18} /> ƒêang x·ª≠ l√Ω...
                    </>
                  ) : (
                    "üöÄ T·∫°o k·∫øt qu·∫£"
                  )}
                </button>
              </>
            ) : (
              <div className="result-box">
                <h3>K·∫øt qu·∫£ th·ª≠ ƒë·ªì</h3>
                <img src={resultImage} alt="Result" />
              </div>
            )}
          </div>
        </div>
      )}

      <Footer />
    </div>
  );
}
